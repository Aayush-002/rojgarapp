# Generated by Django 5.1.4 on 2025-07-02 02:47

import app.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonalDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('mobile_number', models.CharField(max_length=10, verbose_name='Mobile Number')),
                ('contact_number', models.CharField(blank=True, max_length=10, null=True, verbose_name='Contact Number')),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email Address')),
                ('national_id_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='National ID Number')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('others', 'Others')], max_length=10, verbose_name='Gender')),
                ('citizenship_number', models.CharField(max_length=50, verbose_name='Citizenship Number')),
                ('citizenship_issued_date', models.DateField(verbose_name='Citizenship Issued Date')),
                ('citizenship_issued_district', models.CharField(max_length=100, verbose_name='Citizenship Issued District')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('fathers_name', models.CharField(max_length=100, verbose_name="Father's Name")),
                ('mothers_name', models.CharField(max_length=100, verbose_name="Mother's Name")),
                ('spouse_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Spouse Name')),
                ('province', models.CharField(max_length=100, verbose_name='Province')),
                ('district', models.CharField(max_length=100, verbose_name='District')),
                ('municipality', models.CharField(max_length=100, verbose_name='Municipality')),
                ('ward_no', models.PositiveIntegerField(verbose_name='Ward No')),
                ('tole_name', models.CharField(max_length=100, verbose_name='Tole Name')),
                ('education_background', models.CharField(choices=[('slc_see', 'SLC/SEE'), ('plus_two', '+2'), ('bachelor', 'Bachelor'), ('masters', 'Masters'), ('diploma', 'Diploma'), ('phd', 'PHD'), ('uneducated', 'Uneducated'), ('class_eight_pass', 'Class 8 pass'), ('class_five_pass', 'Class 5 pass')], max_length=20, verbose_name='Education Background')),
                ('professional_skill', models.TextField(verbose_name='Professional Skill')),
                ('photo_pp', models.ImageField(upload_to='uploads/photos/', validators=[app.models.validate_photo_pp], verbose_name='Profile Photo')),
                ('citizenship_photo_front', models.ImageField(upload_to='uploads/citizenship/', validators=[app.models.validate_citizenship_photo], verbose_name='Citizenship Photo (Front)')),
                ('citizenship_photo_back', models.ImageField(upload_to='uploads/citizenship/', validators=[app.models.validate_citizenship_photo], verbose_name='Citizenship Photo (Back)')),
                ('cv_resume', models.FileField(blank=True, null=True, upload_to='uploads/resumes/', validators=[app.models.validate_cv_resume], verbose_name='Resume/CV')),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('confirmed', 'Confirmed')], default='pending', max_length=10, null=True, verbose_name='Status')),
                ('employment_status', models.CharField(choices=[('occupied', 'Occupied'), ('unoccupied', 'Unoccupied')], default='unoccupied', max_length=20, verbose_name='Employment Status')),
            ],
        ),
        migrations.CreateModel(
            name='Professions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Profession Name')),
            ],
        ),
        migrations.CreateModel(
            name='UserDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('Email', models.EmailField(max_length=254, verbose_name='Email')),
                ('Gender', models.CharField(max_length=7, verbose_name='Gender')),
                ('PhoneNumber', models.CharField(max_length=12, verbose_name='Phone Number')),
                ('DOB', models.DateField(verbose_name='Date of Birth')),
                ('Skill', models.CharField(max_length=25, verbose_name='Skill')),
                ('Address', models.CharField(max_length=30, verbose_name='Address')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(help_text='Enter your phone number (e.g., +9771234567890)', max_length=15, unique=True, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Job Title')),
                ('description', models.TextField(verbose_name='Job Description')),
                ('posted_date', models.DateTimeField(auto_now_add=True, verbose_name='Posted Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('required_personnel', models.PositiveIntegerField(default=1, verbose_name='Required Personnel')),
                ('posted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Posted By')),
                ('profession', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='job_announcements', to='app.professions', verbose_name='Profession')),
            ],
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_date', models.DateTimeField(auto_now_add=True, verbose_name='Application Date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Status')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='app.jobannouncement', verbose_name='Job')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_applications', to='app.personaldetails', verbose_name='Applicant')),
            ],
            options={
                'ordering': ['-application_date'],
                'unique_together': {('job', 'applicant')},
            },
        ),
    ]
